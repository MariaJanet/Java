// DOUBLY LINKED LIST
package Java_Prac;
import java.util.*;

class Node{
    int data;
    Node next;
    Node prev;
    Node(int data){
        this.data=data;
        this.next=null;
        this.prev=null;
    }
}
class DLL{
    Node head,tail;
    public void insertAtBeg(int data){ //INSERT AT BEGINING
        Node newnode = new Node(data);
        if(head == null){
            head= newnode;
            tail=newnode;
        }
        else{
            newnode.next=head;
            head.prev=newnode;
            head=newnode;
        }
    }
    public void insertAtend(int data){  //INSERT AT END
        Node newnode = new Node(data);
        if(tail==null){
            head = newnode;
            tail=newnode;
        }
        else{
            tail.next=newnode;
            newnode.prev=tail;
            tail=newnode;
        }
    }
    public void deleteAtBeg(){  //DELETE AT BEGINING
        if(head==null){
            System.out.println("List is empty");
        }
        if(head == tail){
            head = null;
           tail = null;
        }
        else{
            head=head.next;
            head.prev=null;
        }
    }
    public void deleteAtend(){	//DELETE AT END
    	Node temp = head;
    	if(temp==null) {
    		System.out.println("List is empty");
    	}
    	while(temp.next.next != null) {
    		temp = temp.next;
    	}
    	temp.next=null;
    }
    public void specificpos(int pos, int data) { 	//	SPECIFIC POSITION TO INSERT THE ELEMENT
        Node newnode = new Node(data);
        Node temp = head;
        if (pos == 0) {
            insertAtBeg(data);
          return;

        }
        for (int i = 0; temp != null && i < pos - 1; i++) {
            temp = temp.next;
        }
        if (temp == null) {
           System.out.println("Position out of bounds");
            return;
        }
        newnode.next = temp.next;
        newnode.prev = temp;
        if (temp.next != null) {
            temp.next.prev = newnode;
        }
        temp.next = newnode;
        if (newnode.next == null) {
            tail = newnode;
        }
    }
    public void reverse(){  //REVERSE THE ELMENT 
    	Node prev=null;
    	Node current=head;
    	Node next=null;
    	while(current != null) {
    		next=current.next;
    		current.next=prev;
    		prev=current;
    		current=next;
    	}
    	head=prev;
    }
    public void display(){	//DISPLAY THE NODE
        Node temp=head;
        if(temp==null){
            System.out.println("List is empty");
        }
        while (temp != null) {
            System.out.print(temp.data);
            if (temp.next != null) {
                System.out.print("<-->");
            }
            temp = temp.next;
        }
        System.out.println();
    }
}
public class Main {
	public static void main(String[] args) {
		DLL link = new DLL();
	    link.insertAtBeg(100); //1
	    link.insertAtBeg(400); //2
	    link.insertAtBeg(500); //3
	    link.insertAtend(200); //1
	    link.insertAtend(300); //2
	    link.insertAtend(600); //3
	    link.specificpos(2, 900);	   
	    link.reverse();
	    link.display();

	}

}



